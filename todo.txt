My basic backlog

- Add measurements for battery level, wifi strength, cpu temp maybe

- UI cleanup
  - clean up UI around the messages
  - dynamically add the data labels based on the data definitions
  - clean up the time series data lables on x-axis points. Unreadable when there are a bunch. Maybe make the graph do it automatically
  - Create a controlPanel top section in the UI. Still not sure I like the accordian stuff on the UI. Just show them all as cards/panes and have them always visible? Maybe the spot where you configure new settings doesn't need to be always visible though
  - my own logos/icon

- Fix hot reload of UI when debugging - gets connected multiple times & multiple sockets open (keep the socket as a data prop and handle the beforeDestory I think)

- When the controls are turned on, create a new runId and save off the settings/controls that were used for that runId. 
    - Might make more sense to just create a new ID for every settings change. I think that's the way it's actually working right now. 
    - Server needs to load 'current' setting at startup and use the right settings id

- clean up typescript warnings/suggestions

- automatically start redis-server when the server launches if not already running? redis-server on my mac is what I use
- Make sure redis server is configured with the right save options so we don't lose data when we lose power (see my redis notes)

- ensure type validity on output of server (maybe input too). At minimum be flexible on input, strict on output/db storage

- Would be nice to switch the tsc options to create a single output file if could figure it out

- overall build script that builds everything from the root
- pi install script? Something that would install and set up redis? Install the client & server apps to start at boot/init



- Have the server serve up the UI build rather than having to run that as a separate server. Maybe make the build of the UI project copy it into the server www directory (and mark it as git ignore)




- Update the readme, add the appropriate tags, make sure the repo is public (can't remember if I made it that way).
- document the 3 pieces and wha they do: client (the pi doing stuff),  server (routing messages around and logging things to the db),  and UI (controlling things and displaying status)
- Document how to build/debug various components (include debug configs in vscode dot file somehow?)
- blog it!


- load previous runs/settings ids and display the measurements and messages for them
